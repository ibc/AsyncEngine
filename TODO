TODO
****



`write': deadlock; recursive locking (ThreadError)
--------------------------------------------------

  trap(:INT)  { puts "*** INT trapped => ignore" }
  AE.start do
    Thread.new { loop { puts "---t1---" ; sleep 0.001 } }
    Thread.new { loop { puts "---t2---" ; sleep 0.001 } }
    AE.add_periodic_timer(0.001) { puts "***AE timer 1***" }
    AE.add_periodic_timer(0.001) { puts "***AE timer 2***" }
  end

If during the loop I press *multiple* times Ctrl+C (so INT signal) I get this error:

  /home/ibc/Proyectos/AsyncEngine/test/test01.rb:9:in `write': deadlock; recursive locking (ThreadError)
        from /home/ibc/Proyectos/AsyncEngine/test/test01.rb:9:in `puts'
        from /home/ibc/Proyectos/AsyncEngine/test/test01.rb:9:in `puts'
        from /home/ibc/Proyectos/AsyncEngine/test/test01.rb:9:in `block in <top (required)>'
        from /home/ibc/Proyectos/AsyncEngine/test/test01.rb:21:in `call'
        from /home/ibc/Proyectos/AsyncEngine/test/test01.rb:21:in `write'
        from /home/ibc/Proyectos/AsyncEngine/test/test01.rb:21:in `puts'

NOTE: The same occurs in EventMachine !!!



SIGPIPE received
----------------

From libev documentation:

http://doc.dvgu.ru/devel/ev.html#the_special_problem_of_sigpipe
-----
The special problem of SIGPIPE

While not really specific to libev, it is easy to forget about SIGPIPE: when reading from a pipe whose other end has been closed, your program gets send a SIGPIPE, which, by default, aborts your program. For most programs this is sensible behaviour, for daemons, this is usually undesirable.

So when you encounter spurious, unexplained daemon exits, make sure you ignore SIGPIPE (and maybe make sure you log the exit status of your daemon somewhere, as that would have given you a big clue).
-----

So maybe AsyncEngine should trap and ignore SIGPIPE from the beginning.

UPDATE: Ruby ignores PIPE signal by default, and also uv so nothing must be done.